#!/usr/bin/env python3
"""
SIMPLIFIED ECU Timing Diagram Generator for Excel
Just write simple text patterns - the script does everything else!
"""

import openpyxl
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Border, Side, Alignment, Font
from openpyxl.utils import get_column_letter

class SimpleTimingDiagram:
    """Super simple timing diagram generator"""
    
    def __init__(self):
        self.wb = Workbook()
        self.ws = self.wb.active
        self.ws.title = "Timing"
        
        # Colors for different signal values
        self.colors = {
            '0': 'FFFFFF',  # White for LOW
            '1': '4472C4',  # Blue for HIGH
            '-': 'FFFFFF',  # White for don't care
            'X': 'D9D9D9',  # Gray for undefined
            # State colors
            'OFF': 'FF6B6B',      # Red
            'INIT': 'FFD93D',     # Yellow  
            'RUN': '6BCF7F',      # Green
            'SLEEP': 'E8E8E8',    # Light gray
            'WAKE': 'FFE66D',     # Light yellow
            'POST1': '95E1D3',    # Light cyan
            'POST2': 'F38181',    # Light red
            'LATCH': '4ECDC4',    # Cyan
            # You can add more colors here
        }
        
        self.current_row = 3
        self.time_units = 50  # Total time units to show
        
    def setup_basic_grid(self, title="Timing Diagram"):
        """Basic setup - just title and grid"""
        # Title
        self.ws.merge_cells(f'B1:AZ1')
        self.ws['B1'] = title
        self.ws['B1'].font = Font(size=14, bold=True)
        self.ws['B1'].alignment = Alignment(horizontal='center')
        
        # Column widths
        self.ws.column_dimensions['B'].width = 25  # Signal names
        for i in range(3, 53):  # 50 time columns
            self.ws.column_dimensions[get_column_letter(i)].width = 2.5
            
        # Time header (every 5 units = 100ms)
        for i in range(0, self.time_units, 5):
            cell = self.ws.cell(row=2, column=3+i, value=f"{i*20}ms")
            cell.font = Font(size=9, italic=True)
            
    def add(self, signal_name, pattern):
        """
        SUPER SIMPLE: Just give signal name and pattern!
        
        Examples:
            add("Power", "0000011111111111111111111111111110000000")
            add("Clock", "0101010101010101010101010101010101010101")
            add("State", "OFF OFF OFF INIT INIT RUN RUN RUN RUN SLEEP")
            add("CAN", "0000----1111----0000----1111----00000000")
        """
        row = self.current_row
        self.current_row += 1
        
        # Add signal name
        self.ws.cell(row=row, column=2, value=signal_name)
        self.ws.cell(row=row, column=2).font = Font(size=10, bold=True)
        
        # Handle different pattern types
        if ' ' in pattern:
            # State pattern (words separated by spaces)
            self._add_states(row, pattern.split())
        else:
            # Digital pattern (string of 0,1,-,X)
            self._add_digital(row, pattern)
            
        # Set row height
        self.ws.row_dimensions[row].height = 20
        
    def _add_digital(self, row, pattern):
        """Add digital signal from pattern string"""
        for i, char in enumerate(pattern):
            if i >= self.time_units:
                break
            cell = self.ws.cell(row=row, column=3+i)
            
            # Set color based on character
            color = self.colors.get(char, 'FFFFFF')
            cell.fill = PatternFill(start_color=color, end_color=color, fill_type='solid')
            
            # Add border
            cell.border = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
    
    def _add_states(self, row, states):
        """Add state machine signal from list of states"""
        current_state = states[0]
        start_col = 0
        
        for i, state in enumerate(states + ['END']):  # Add END to trigger last state
            if state != current_state or i == len(states):
                # State changed, draw the previous state
                end_col = i - 1
                
                # Merge cells for this state
                if end_col >= start_col:
                    if end_col == start_col:
                        # Single cell
                        cell = self.ws.cell(row=row, column=3+start_col)
                    else:
                        # Merge multiple cells
                        self.ws.merge_cells(
                            start_row=row, start_column=3+start_col,
                            end_row=row, end_column=3+end_col
                        )
                        cell = self.ws.cell(row=row, column=3+start_col)
                    
                    # Set state text and color
                    cell.value = current_state
                    cell.alignment = Alignment(horizontal='center', vertical='center')
                    cell.font = Font(size=9, bold=True)
                    
                    # Apply color
                    color = self.colors.get(current_state, 'FFFFFF')
                    cell.fill = PatternFill(start_color=color, end_color=color, fill_type='solid')
                    
                    # Add borders
                    for col in range(3+start_col, 3+end_col+1):
                        c = self.ws.cell(row=row, column=col)
                        c.border = Border(
                            left=Side(style='thin'),
                            right=Side(style='thin'),
                            top=Side(style='thin'),
                            bottom=Side(style='thin')
                        )
                
                # Update for next state
                current_state = state
                start_col = i
    
    def space(self):
        """Add empty row for spacing"""
        self.current_row += 1
        
    def section(self, title):
        """Add section header"""
        row = self.current_row
        self.current_row += 1
        
        self.ws.merge_cells(f'B{row}:D{row}')
        cell = self.ws.cell(row=row, column=2, value=title)
        cell.font = Font(size=11, bold=True)
        cell.fill = PatternFill(start_color='D9D9D9', end_color='D9D9D9', fill_type='solid')
        cell.border = Border(
            left=Side(style='medium'),
            right=Side(style='medium'),
            top=Side(style='medium'),
            bottom=Side(style='medium')
        )
        
    def timing_mark(self, start_time, end_time, label):
        """Add timing annotation (like "200ms")"""
        row = self.current_row
        self.current_row += 1
        
        # Add label at midpoint
        mid = (start_time + end_time) // 2
        cell = self.ws.cell(row=row, column=3+mid, value=label)
        cell.font = Font(size=9, italic=True, color='FF0000')
        cell.alignment = Alignment(horizontal='center')
        
        # Draw line
        for i in range(start_time, end_time + 1):
            cell = self.ws.cell(row=row, column=3+i)
            if i == start_time or i == end_time:
                cell.border = Border(top=Side(style='medium', color='FF0000'))
            else:
                cell.border = Border(top=Side(style='thin', color='FF0000'))
    
    def save(self, filename="timing.xlsx"):
        """Save the file"""
        # Remove gridlines for cleaner look
        self.ws.sheet_view.showGridLines = False
        self.wb.save(filename)
        print(f"âœ“ Saved: {filename}")


# ============================================================================
# SUPER SIMPLE INPUT FORMAT - Just edit these strings!
# ============================================================================

def create_timing_from_simple_input():
    """
    CREATE YOUR TIMING DIAGRAM HERE!
    Just edit the patterns below - it's that simple!
    
    Pattern format:
    - Digital signals: Use 0 (low), 1 (high), - (don't care), X (undefined)
    - State signals: Use state names separated by spaces
    """
    
    # Create diagram
    t = SimpleTimingDiagram()
    t.setup_basic_grid("ECU Timing Diagram")
    
    # ===== DEFINE YOUR SIGNALS HERE =====
    # Just copy these lines and change the patterns!
    
    # System signals
    t.section("SYSTEM")
    t.add("5Y5 State", "OFF OFF OFF OFF INIT INIT RUN RUN RUN RUN RUN RUN LATCH LATCH LATCH LATCH POST1 POST1 POST1 POST2 POST2 POST2 OFF OFF OFF")
    t.add("Power", "00000111111111111111111111111111111111111111100000")
    t.add("Ignition", "00000001111111111111111111111111111111111111000000")
    t.space()
    
    # Communication
    t.section("COMMUNICATION")
    t.add("CAN Active", "00000000111111111111111111111111111111110000000000")
    t.add("LIN Active", "00000000001111111111111111111111111111000000000000")
    t.add("CAN Wake", "00000001111111111111111111111111111111110000000000")
    t.space()
    
    # Control signals  
    t.section("CONTROL")
    t.add("Brake", "00000000000011111100000000000000000000000000000000")
    t.add("Throttle", "00000000000000000011111111110000000000000000000000")
    t.space()
    
    # Periodic signals
    t.section("PERIODIC")
    t.add("Clock", "01010101010101010101010101010101010101010101010101")
    t.add("PWM", "11001100110011001100110011001100110011001100110011")
    t.add("Heartbeat", "10000000100000001000000010000000100000001000000010")
    t.space()
    
    # Timing marks
    t.timing_mark(5, 10, "200ms")
    t.timing_mark(20, 25, "100ms")
    
    # Save
    t.save("my_timing_diagram.xlsx")


def create_from_text_file():
    """
    EVEN EASIER: Define your signals in a text file!
    
    Create a file 'signals.txt' with format:
    SECTION:System
    Power:00000111111111111111111111110000
    State:OFF OFF OFF INIT RUN RUN RUN SLEEP
    Clock:01010101010101010101010101010101
    """
    
    t = SimpleTimingDiagram()
    t.setup_basic_grid("My Timing Diagram")
    
    # Read from file
    try:
        with open('signals.txt', 'r') as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith('#'):
                    continue  # Skip empty lines and comments
                    
                if line.startswith('SECTION:'):
                    t.section(line.split(':', 1)[1])
                elif line.startswith('SPACE'):
                    t.space()
                elif line.startswith('TIMING:'):
                    parts = line.split(':')[1].split(',')
                    t.timing_mark(int(parts[0]), int(parts[1]), parts[2])
                elif ':' in line:
                    name, pattern = line.split(':', 1)
                    t.add(name, pattern)
                    
        t.save("timing_from_file.xlsx")
        
    except FileNotFoundError:
        print("Creating example signals.txt file...")
        with open('signals.txt', 'w') as f:
            f.write("""# ECU Timing Signals
# Format: SignalName:Pattern
# Use 0/1 for digital, state names with spaces for states

SECTION:Power Management
Battery:00000111111111111111111111111111111111111000000000
Ignition:00000000111111111111111111111111111111100000000000
ECU_State:OFF OFF OFF OFF INIT INIT INIT RUN RUN RUN RUN RUN RUN RUN SLEEP SLEEP
SPACE

SECTION:Communication  
CAN_TX:00000000110011001100110011001100110011000000000000
CAN_RX:00000000001100110011001100110011001100000000000000
SPACE

SECTION:Sensors
Brake:00000000000011111000000000000000000000000000000000
Throttle:00000000000000000001111111111111000000000000000000
SPACE

TIMING:5,10,Boot:200ms
TIMING:20,30,Active:500ms
""")
        print("âœ“ Created signals.txt - Edit it and run again!")


def create_multiple_diagrams():
    """Create 200 signals easily using loops"""
    
    t = SimpleTimingDiagram()
    t.setup_basic_grid("200 Signal Example")
    
    # Example: Generate many similar signals programmatically
    for i in range(1, 21):  # 20 CAN messages
        # Create pattern with different timings
        pattern = '0' * (i) + '1' * 10 + '0' * (40 - i)
        t.add(f"CAN_MSG_{i:03d}", pattern)
    
    t.space()
    
    # Generate sensor signals
    for i in range(1, 11):  # 10 sensors
        # Random-like pattern
        pattern = ''.join(['1' if (j + i) % 3 == 0 else '0' for j in range(50)])
        t.add(f"SENSOR_{i:02d}", pattern)
    
    t.save("many_signals.xlsx")


# ============================================================================
# MAIN EXECUTION
# ============================================================================

if __name__ == "__main__":
    print("\n" + "="*60)
    print("SUPER SIMPLE ECU TIMING DIAGRAM GENERATOR")
    print("="*60)
    
    # Method 1: Direct code (easiest for small diagrams)
    print("\n1. Creating timing diagram from code...")
    create_timing_from_simple_input()
    
    # Method 2: From text file (best for many signals)
    print("\n2. Creating from text file...")
    create_from_text_file()
    
    # Method 3: Programmatic generation (best for repetitive signals)
    print("\n3. Creating many signals programmatically...")
    create_multiple_diagrams()
    
    print("\n" + "="*60)
    print("âœ“ ALL DONE! Check your Excel files:")
    print("  - my_timing_diagram.xlsx")
    print("  - timing_from_file.xlsx (or edit signals.txt)")
    print("  - many_signals.xlsx")
    print("\nJust edit the patterns in the code or signals.txt file!")
    print("Patterns: 0=LOW, 1=HIGH, -=don't care, X=undefined")
    print("States: Just write state names with spaces!")
    print("="*60)


# ============================================================================
# QUICK REFERENCE
# ============================================================================
"""
QUICK REFERENCE FOR PATTERNS:

Digital Patterns:
  "00001111000"     - Simple on/off
  "01010101010"     - Clock signal  
  "10001000100"     - Periodic pulse
  "000---------"    - Don't care region
  "0000XXXX000"     - Undefined region

State Patterns:
  "OFF OFF ON ON"   - Simple states
  "SLEEP INIT RUN"  - ECU states
  
Just count the time units:
  - Each character = 1 time unit
  - Each unit = 20ms (configurable)
  - Total 50 units = 1000ms

That's it! Super simple!
"""